---
title: "君にもできる！<br/>AutoML Tables"
date: 2023-05-14
author: "フェンリル株式会社<br/>太田 有人"
date-format: "YYYY年 M月 D日"
event_link: "[GCPUG in Shiga #3 「はじめてのAutoML・BigQuery」](https://gcpug-shiga.connpass.com/event/276076/)"
structure: "[下書き](./slides/structures/2023-05-14_GCPUG_Shiga.qmd)"
event_name: "GCPUG in Shiga #3 「はじめてのAutoML・BigQuery」"
format:
  revealjs:
    theme: simple
    slide-level: 2
    template-partials:
      - _custom_templates/title-slide.html
    # logo:
    # footer: "フッターテキスト<br/>改行もできる"
    menu: false
    slide-number: c/t
    show-slide-number: speaker
    # show-slide-number: print
    # show-notes: true
    # show-notes: separate-page
    # pdf-separate-fragments: true
    preview-links: false
    # slide-tone: true
    progress: false
    history: false
    hash-type: number
    # chalkboard:
    #   buttons: false
    #   src: <file>
    # transition: convex
    # transition-speed: default
    # navigation-mode: vertical
    # controls-layout: bottom-right
    # controls-back-arrows: visible
    # controls-tutorial: true
    css: _custom_scss/style.scss
#   pptx:
#     slide-level: 2
    
---
```{python}
import internal_module.internal as itn

duration = 0
```

# はじめに

## 自己紹介 {.smaller}

:::: {.columns}

::: {.column width="40%"}

<img src="_images/profile_b_org_01.png" />
<img src="https://api.accredible.com/v1/frontend/credential_website_embed_image/badge/62647313" />
<img src="https://api.accredible.com/v1/frontend/credential_website_embed_image/badge/70175632" />

:::

::: {.column width="60%"}
- 名前 : 太田 有人
- 所属 : フェンリル株式会社 クラウド事業推進部
- 出身 : 1987/7/1 に京都で生まれる
- コンビニバイト10年の後にIT業界に飛び込む（現在7年目）
- システムエンジニア（2017～2021）<br>↓<br>クラウドエンジニア（2022～現在）
- [LinkedIn](https://www.linkedin.com/in/ba4585199)
- [Twitter (別名で活動中)](https://twitter.com/nazonoobasan407)
:::

::::

::: {.notes}
まずは、私について軽く自己紹介させてください。

```{python}
#| output: asis

# 時間設定
duration = duration + 60

print(f'**ここまでで {itn.str_time(duration)}**')
```
:::

<!-- --------------------------------------------------------------------- -->
<!-- --------------------------------------------------------------------- -->

## ご注意とお詫び

![](_images/automl_tables_deprecated.png)

::: {.fragment}
AutoML Tables は非推奨となりました……
:::

::: {.fragment}
<br/>
　　**→Vertex AI / 表形式のデータ / AutoML**  
　　　の組み合わせで行きます！
:::

::: {.notes}


- AutoML Tables は非推奨となり、2024 年 1 月 23 日以降は Google Cloud で使用できなくなります。
- 本発表内容は Vertex AI / 表形式のデータ / AutoML を使うことを前提として構成しています

```{python}
#| output: asis

# 時間設定
duration = duration + 30

print(f'**ここまでで {itn.str_time(duration)}**')
```
:::

<!-- --------------------------------------------------------------------- -->
<!-- --------------------------------------------------------------------- -->

## 本発表で話すこと・話さないこと

<br/>

::: {.fragment}
### 話すこと
- Vertex AI / 表形式のデータ / AutoML でできること
- どこの部分が "Auto" な ML なのか
:::
::: {.fragment}
### 話さないこと

- 具体的なユースケース・事例
- 詳細な作業手順
:::

::: {.notes}


```{python}
#| output: asis

# 時間設定
duration = duration + 30

print(f'**ここまでで {itn.str_time(duration)}**')
```
:::

<!-- --------------------------------------------------------------------- -->
<!-- --------------------------------------------------------------------- -->

# ところで……

::: {.notes}


```{python}
#| output: asis

# 時間設定
duration = duration + 5

print(f'**ここまでで {itn.str_time(duration)}**')
```
:::

<!-- --------------------------------------------------------------------- -->
<!-- --------------------------------------------------------------------- -->

## 最近は、魔法使いの修行が流行っている？

::: {.incremental}
- ChatGPT(AI) に呪文をかけて、望みの文章を生み出す
- Stable Diffusion(AI) に呪文をかけて、望みの画像を生み出す
- MusicLM(AI) に呪文をかけて、望みの音楽を生み出す
:::
::: {.fragment}
**よりよい呪文を作ったり、よりよい AI と呪文の組み合わせの研究に励む人々がたくさん！**
:::

::: {.notes}


```{python}
#| output: asis

# 時間設定
duration = duration + 30

print(f'**ここまでで {itn.str_time(duration)}**')
```
:::

<!-- --------------------------------------------------------------------- -->
<!-- --------------------------------------------------------------------- -->

## 「呪文」をかける対象の AI を育てる

::: {.incremental}
- まずは呪文をかける対象の AI を育てる必要がある
- データをたくさん AI に与えることで、成長させる
  - これが世にいう「機械学習」と呼ばれるプロセス
- 成長した AI に呪文をかけて、望みの結果を生み出す
:::

::: {.fragment}
**望みのものを生み出すために、AIの育成に励む人々もたくさん！**
:::

::: {.notes}

（内容）

機械学習 : Machine Learning (ML)

AIを育てて、育てたAIに呪文をかけるというところ、何だか分かりにくいかもしれませんね。  
ここで一つ、お遊びを挟んでみたいと思います。

```{python}
#| output: asis

# 時間設定
duration = duration + 30

print(f'**ここまでで {itn.str_time(duration)}**')
```
:::

<!-- --------------------------------------------------------------------- -->
<!-- --------------------------------------------------------------------- -->

## コーヒー、ココア、ピザ、ひじ

::: {.r-stack}
![](_images/coffee_cocoa_01.png){.fragment .fade-in-then-out}

![](_images/coffee_cocoa_02.png){.fragment .fade-in-then-out}

![](_images/coffee_cocoa_03.png){.fragment }
:::

::: {.notes}

- コーヒーと言ったらココアと言って、ココアと言ったらコーヒーと言うゲーム
- ピザと10回言って、「じゃあココア」と肘を指すゲーム

「ひじ」って言ってくれたら、「引っかかった〜、ココアって言ったらコーヒーって言うんやで」というオチのお遊びですね。  
出題者としては、「ココアと言ったら"ひじ"って言ってもらって、笑いを取りたい」というような意図があるかと思います。

この意図があるので、  
「コーヒーと言ったらココアと言い、ココアと言ったらコーヒーという」  
「"ピザ"と10回言う」  
という言葉と行動を回答者に与えて、"学習"をしてもらったんですね。

図にすると、こんな感じです。


これを、さっきの「呪文」とAIのお話に当てはめてみると……

```{python}
#| output: asis

# 時間設定
duration = duration + 240

print(f'**ここまでで {itn.str_time(duration)}**')
```
:::

<!-- --------------------------------------------------------------------- -->
<!-- --------------------------------------------------------------------- -->

## データ、学習、呪文

::: {.r-stack}
![](_images/data_learn_jyumon_01.png){.fragment .fade-in-then-out}

![](_images/data_learn_jyumon_02.png){.fragment .fade-in-then-out}

![](_images/data_learn_jyumon_03.png){.fragment }
:::

::: {.notes}


AI は、データをたくさん与えられることで、"学習"して、成長します。  
AI に与えられるデータは、「コーヒー」とかの言葉の他にもたくさんの形式があります。

最初にチラッと出てきた「表形式のデータ」もその一つです。  
ということで……

```{python}
#| output: asis

# 時間設定
duration = duration + 60

print(f'**ここまでで {itn.str_time(duration)}**')
```
:::

<!-- --------------------------------------------------------------------- -->
<!-- --------------------------------------------------------------------- -->

# Vertex AI<br/>表形式のデータ<br/>AutoML<br/><br/>で何ができる？

::: {.notes}

Vertex AI / 表形式のデータ / AutoML で何ができるのか、見ていきたいと思います。

```{python}
#| output: asis

# 時間設定
duration = duration + 10

print(f'**ここまでで {itn.str_time(duration)}**')
```
:::

<!-- --------------------------------------------------------------------- -->
<!-- --------------------------------------------------------------------- -->

## Vertex AI / 表形式のデータ / AutoML でできること

::: {.incremental}
- AI に与えるデータを管理できる
- AI に与えるデータを指定すれば、自動で AI を育ててくれる
  - ここが "Auto" ML
- AI の成長状態を記録・管理できる
- 育てた AI に呪文をかけて、データを出力させる
:::

::: {.notes}


- AI に与えるデータ自体を管理できる (Datasets)
- AI に与えるデータを指定すれば、自動で AI を育ててくれる (AutoML)
- AI の成長状態を記録・管理できる (Model Registry)
- 育てた AI に呪文をかけて、データを出力させる (Online/Batch prediction)
  - 表形式データの場合は、予測値（単体値・連続値）もしくは分類の予測結果を生み出す

```{python}
#| output: asis

# 時間設定
duration = duration + 30

print(f'**ここまでで {itn.str_time(duration)}**')
```
:::

<!-- --------------------------------------------------------------------- -->
<!-- --------------------------------------------------------------------- -->

## AI に与えるデータを管理できる

:::: {.r-stack}

::: {.fragment .fade-in-then-out}  
![](_images/learning_data_management.png)
:::

::: {.fragment .fade-in-then-out}
**データセットの作成**  
![](_images/dataset_create.png){height="500"}
:::

::: {.fragment .fade-in-then-out}
**CSVファイルのアップロードもOK**  
![](_images/dataset_source.png){height="500"}
:::

::: {.fragment .fade-in-then-out}
**データセットの一覧表示**  
![](_images/dataset_list.png){height="500"}
:::

::::

::: {.notes}


- AI に与えるデータは、データセットという単位で管理する

```{python}
#| output: asis

# 時間設定
duration = duration + 60

print(f'**ここまでで {itn.str_time(duration)}**')
```
:::

<!-- --------------------------------------------------------------------- -->
<!-- --------------------------------------------------------------------- -->

## 自動で AI を育ててくれる (AutoML)

:::: {.r-stack}

::: {.fragment .fade-in-then-out}
![](_images/auto_ml_01.png)
:::

::: {.fragment .fade-in-then-out}
**目的とデータを指定**  
![](_images/auto_ml_02.png){height="500"}
:::

::: {.fragment .fade-in-then-out}
**AI の名前と、目的の詳細を指定**  
![](_images/auto_ml_03.png){height="500"}
:::

::: {.fragment .fade-in-then-out}
**学習に使う時間の上限を設定**  
![](_images/auto_ml_04.png){height="500"}
:::

::::

::: {.notes}


```{python}
#| output: asis

# 時間設定
duration = duration + 60

print(f'**ここまでで {itn.str_time(duration)}**')
```
:::

<!-- --------------------------------------------------------------------- -->
<!-- --------------------------------------------------------------------- -->

## AI の成長状態を記録・管理できる

:::: {.r-stack}

::: {.fragment .fade-in-then-out}
![](_images/ai_model_management_01.png)
:::

::: {.fragment .fade-in-then-out}
**AIモデルの一覧表示**  
![](_images/ai_model_management_02.png){height="500"}
:::

::: {.fragment .fade-in-then-out}
**AIバージョンの一覧表示**  
![](_images/ai_model_management_03.png){height="500"}
:::

::::

::: {.notes}


- AI はモデルという単位で管理する
- AI の成長状態は、バージョンとして管理する

```{python}
#| output: asis

# 時間設定
duration = duration + 45

print(f'**ここまでで {itn.str_time(duration)}**')
```
:::

<!-- --------------------------------------------------------------------- -->
<!-- --------------------------------------------------------------------- -->

## 育てた AI に呪文をかけてデータ出力

:::: {.r-stack}

::: {.fragment .fade-in-then-out}
![](_images/prediction_01.png)
:::

::: {.fragment .fade-in-then-out}
**AIが動く場所 (エンドポイント) を確保する**  
![](_images/prediction_02.png){height="500"}
:::

::: {.fragment .fade-in-then-out}
**AIに呪文をかける**  
![](_images/prediction_03.png){height="500"}
:::

::: {.fragment .fade-in-then-out}
**AIがデータを出力**  
![](_images/prediction_04.png){height="500"}
:::

::::

::: {.notes}


- AI に、データという名の呪文をかける
  - （REST API のリクエストボディに呪文を仕込んで呼び出し）

```{python}
#| output: asis

# 時間設定
duration = duration + 60

print(f'**ここまでで {itn.str_time(duration)}**')
```
:::

<!-- --------------------------------------------------------------------- -->
<!-- --------------------------------------------------------------------- -->

## Vertex AI / 表形式のデータ / AutoML でできること (再掲)

- AI に与えるデータを管理できる
- AI に与えるデータを指定すれば、自動で AI を育ててくれる
  - ここが "Auto" ML
- AI の成長状態を記録・管理できる
- 育てた AI に呪文をかけて、データを出力させる

::: {.notes}

以上、Vertex AI / 表形式のデータ / AutoML でできることについて、簡単に見てきました。  
どこの部分が "Auto" な "ML" なのかということも、分かったかと思います。

最後に、料金についても軽く触れておきたいと思います。

```{python}
#| output: asis

# 時間設定
duration = duration + 30

print(f'**ここまでで {itn.str_time(duration)}**')
```
:::

<!-- --------------------------------------------------------------------- -->
<!-- --------------------------------------------------------------------- -->

## 大体いくらぐらいかかるものなの？

::: {.incremental}
- AI にデータを与えて学習させる
  - 1時間で 2900円くらい ($21.252)
- AI に呪文をかけてデータを出力させる
    - AI が動く場所 (エンドポイント) の料金がかかる
    - 東京リージョンで、一番安いスペックのマシンの場合
      - 1時間で 20円くらい ($0.1402)
- 参考 : [Vertex AutoML モデル 料金](https://cloud.google.com/vertex-ai/pricing?hl=ja#automl_models)
:::

::: {.notes}


```{python}
#| output: asis

# 時間設定
duration = duration + 60

print(f'**ここまでで {itn.str_time(duration)}**')
```
:::

<!-- --------------------------------------------------------------------- -->
<!-- --------------------------------------------------------------------- -->

# Vertex AI<br/>表形式のデータ<br/>AutoML<br/><br/>の組み合わせなら……

::: {.notes}


```{python}
#| output: asis

# 時間設定
duration = duration + 5

print(f'**ここまでで {itn.str_time(duration)}**')
```
:::

<!-- --------------------------------------------------------------------- -->
<!-- --------------------------------------------------------------------- -->

# スプレッドシート<br/>エクセルのデータ<br/><br/>でも始められます！

::: {.notes}


```{python}
#| output: asis

# 時間設定
duration = duration + 5

print(f'**ここまでで {itn.str_time(duration)}**')
```
:::

<!-- --------------------------------------------------------------------- -->
<!-- --------------------------------------------------------------------- -->

# おしまい

::: {.notes}


```{python}
#| output: asis

# 時間設定
duration = duration + 10

print(f'**ここまでで {itn.str_time(duration)}**')
```
:::

<!-- --------------------------------------------------------------------- -->
<!-- --------------------------------------------------------------------- -->

# Appendix

::: {.notes}


```{python}
#| output: asis

# 時間設定
duration = duration + 10

print(f'**ここまでで {itn.str_time(duration)}**')
```
:::

<!-- --------------------------------------------------------------------- -->
<!-- --------------------------------------------------------------------- -->

## このスライドについて {.smaller}

- 何で作ってるの？
  - [Quarto](https://quarto.org/) というドキュメント生成システムを使ってます
    - スライドは Reveal.js を使って作成されます
- ソースコードはあるの？
  - [GitHub](https://github.com/sakai-nako/gcl-proj-sakai-nako) にあります
    - `static_site/contents/works/slides/` 配下にあります
- インフラ構成は？
  - Google Domains, Cloud DNS, Firebase Hosting を使ってます
- 静的Webサイト -> [Nako's Knowledge Base](https://gcl.hack-pleasantness.com/)

::: {.notes}


```{python}
#| output: asis

# 時間設定
duration = duration + 10

print(f'**ここまでで {itn.str_time(duration)}**')
```
:::

<!-- --------------------------------------------------------------------- -->
<!-- --------------------------------------------------------------------- -->
